// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     inviteSent.avsc
 *     userRegistered.avsc
 */

package friendevents

import (
	"github.com/actgardner/gogen-avro/compiler"
	"github.com/actgardner/gogen-avro/container"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/vm/types"
	"io"
)

type UserRegistered struct {
	ID           string
	TimeUnixMs   int64
	Email        string
	PasswordHash string
}

func NewUserRegisteredWriter(writer io.Writer, codec container.Codec, recordsPerBlock int64) (*container.Writer, error) {
	str := &UserRegistered{}
	return container.NewWriter(writer, codec, recordsPerBlock, str.Schema())
}

func DeserializeUserRegistered(r io.Reader) (*UserRegistered, error) {
	t := NewUserRegistered()
	err := deserializeField(r, t.Schema(), t.Schema(), t)
	return t, err
}

func DeserializeUserRegisteredFromSchema(r io.Reader, schema string) (*UserRegistered, error) {
	t := NewUserRegistered()
	err := deserializeField(r, schema, t.Schema(), t)
	return t, err
}

func NewUserRegistered() *UserRegistered {
	return &UserRegistered{}
}

func (r *UserRegistered) Schema() string {
	return "{\"fields\":[{\"name\":\"ID\",\"type\":\"string\"},{\"logicalType\":\"timestamp-millis\",\"name\":\"TimeUnixMs\",\"type\":\"long\"},{\"name\":\"Email\",\"type\":\"string\"},{\"name\":\"PasswordHash\",\"type\":\"string\"}],\"name\":\"UserRegistered\",\"namespace\":\"com.evertras.events-demo.events\",\"type\":\"record\",\"version\":\"1\"}"
}

func (r *UserRegistered) SchemaName() string {
	return "com.evertras.events-demo.events.UserRegistered"
}

func (r *UserRegistered) Serialize(w io.Writer) error {
	return writeUserRegistered(r, w)
}

func (_ *UserRegistered) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *UserRegistered) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *UserRegistered) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *UserRegistered) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *UserRegistered) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *UserRegistered) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *UserRegistered) SetString(v string)   { panic("Unsupported operation") }
func (_ *UserRegistered) SetUnionElem(v int64) { panic("Unsupported operation") }
func (r *UserRegistered) Get(i int) types.Field {
	switch i {
	case 0:
		return (*types.String)(&r.ID)
	case 1:
		return (*types.Long)(&r.TimeUnixMs)
	case 2:
		return (*types.String)(&r.Email)
	case 3:
		return (*types.String)(&r.PasswordHash)

	}
	panic("Unknown field index")
}
func (r *UserRegistered) SetDefault(i int) {
	switch i {

	}
	panic("Unknown field index")
}
func (_ *UserRegistered) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UserRegistered) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UserRegistered) Finalize()                        {}

type UserRegisteredReader struct {
	r io.Reader
	p *vm.Program
}

func NewUserRegisteredReader(r io.Reader) (*UserRegisteredReader, error) {
	containerReader, err := container.NewReader(r)
	if err != nil {
		return nil, err
	}

	t := NewUserRegistered()
	deser, err := compiler.CompileSchemaBytes([]byte(containerReader.AvroContainerSchema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	return &UserRegisteredReader{
		r: containerReader,
		p: deser,
	}, nil
}

func (r *UserRegisteredReader) Read() (*UserRegistered, error) {
	t := NewUserRegistered()
	err := vm.Eval(r.r, r.p, t)
	return t, err
}
